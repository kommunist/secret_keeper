// Code generated by MockGen. DO NOT EDIT.
// Source: client/internal/user (interfaces: UserAccessor)

// Package user is a generated GoMock package.
package user

import (
	models "client/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserAccessor is a mock of UserAccessor interface.
type MockUserAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockUserAccessorMockRecorder
}

// MockUserAccessorMockRecorder is the mock recorder for MockUserAccessor.
type MockUserAccessorMockRecorder struct {
	mock *MockUserAccessor
}

// NewMockUserAccessor creates a new mock instance.
func NewMockUserAccessor(ctrl *gomock.Controller) *MockUserAccessor {
	mock := &MockUserAccessor{ctrl: ctrl}
	mock.recorder = &MockUserAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAccessor) EXPECT() *MockUserAccessorMockRecorder {
	return m.recorder
}

// UserCreate mocks base method.
func (m *MockUserAccessor) UserCreate(arg0 context.Context, arg1 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockUserAccessorMockRecorder) UserCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockUserAccessor)(nil).UserCreate), arg0, arg1)
}

// UserGet mocks base method.
func (m *MockUserAccessor) UserGet(arg0 context.Context, arg1 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet.
func (mr *MockUserAccessorMockRecorder) UserGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockUserAccessor)(nil).UserGet), arg0, arg1)
}
