// Code generated by MockGen. DO NOT EDIT.
// Source: client/internal/syncer (interfaces: StorageAccessor)

// Package syncer is a generated GoMock package.
package syncer

import (
	models "client/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorageAccessor is a mock of StorageAccessor interface.
type MockStorageAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockStorageAccessorMockRecorder
}

// MockStorageAccessorMockRecorder is the mock recorder for MockStorageAccessor.
type MockStorageAccessorMockRecorder struct {
	mock *MockStorageAccessor
}

// NewMockStorageAccessor creates a new mock instance.
func NewMockStorageAccessor(ctrl *gomock.Controller) *MockStorageAccessor {
	mock := &MockStorageAccessor{ctrl: ctrl}
	mock.recorder = &MockStorageAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageAccessor) EXPECT() *MockStorageAccessorMockRecorder {
	return m.recorder
}

// GetLastSyncEventVersion mocks base method.
func (m *MockStorageAccessor) GetLastSyncEventVersion(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastSyncEventVersion", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastSyncEventVersion indicates an expected call of GetLastSyncEventVersion.
func (mr *MockStorageAccessorMockRecorder) GetLastSyncEventVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastSyncEventVersion", reflect.TypeOf((*MockStorageAccessor)(nil).GetLastSyncEventVersion), arg0, arg1)
}

// SaveSyncEvent mocks base method.
func (m *MockStorageAccessor) SaveSyncEvent(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSyncEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSyncEvent indicates an expected call of SaveSyncEvent.
func (mr *MockStorageAccessorMockRecorder) SaveSyncEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSyncEvent", reflect.TypeOf((*MockStorageAccessor)(nil).SaveSyncEvent), arg0, arg1, arg2)
}

// SecretList mocks base method.
func (m *MockStorageAccessor) SecretList(arg0 context.Context, arg1, arg2 string) ([]models.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretList", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretList indicates an expected call of SecretList.
func (mr *MockStorageAccessorMockRecorder) SecretList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretList", reflect.TypeOf((*MockStorageAccessor)(nil).SecretList), arg0, arg1, arg2)
}

// SecretsUpsert mocks base method.
func (m *MockStorageAccessor) SecretsUpsert(arg0 context.Context, arg1 []models.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretsUpsert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretsUpsert indicates an expected call of SecretsUpsert.
func (mr *MockStorageAccessorMockRecorder) SecretsUpsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretsUpsert", reflect.TypeOf((*MockStorageAccessor)(nil).SecretsUpsert), arg0, arg1)
}
