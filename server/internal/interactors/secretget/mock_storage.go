// Code generated by MockGen. DO NOT EDIT.
// Source: server/internal/interactors/secretget (interfaces: SecretGetter)

// Package secretget is a generated GoMock package.
package secretget

import (
	context "context"
	reflect "reflect"
	models "server/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockSecretGetter is a mock of SecretGetter interface.
type MockSecretGetter struct {
	ctrl     *gomock.Controller
	recorder *MockSecretGetterMockRecorder
}

// MockSecretGetterMockRecorder is the mock recorder for MockSecretGetter.
type MockSecretGetterMockRecorder struct {
	mock *MockSecretGetter
}

// NewMockSecretGetter creates a new mock instance.
func NewMockSecretGetter(ctrl *gomock.Controller) *MockSecretGetter {
	mock := &MockSecretGetter{ctrl: ctrl}
	mock.recorder = &MockSecretGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretGetter) EXPECT() *MockSecretGetterMockRecorder {
	return m.recorder
}

// SecretGet mocks base method.
func (m *MockSecretGetter) SecretGet(arg0 context.Context, arg1, arg2 string) ([]models.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretGet", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretGet indicates an expected call of SecretGet.
func (mr *MockSecretGetterMockRecorder) SecretGet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretGet", reflect.TypeOf((*MockSecretGetter)(nil).SecretGet), arg0, arg1, arg2)
}
