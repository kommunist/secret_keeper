// Code generated by MockGen. DO NOT EDIT.
// Source: server/internal/interactors/userset (interfaces: UserSetter)

// Package userset is a generated GoMock package.
package userset

import (
	context "context"
	reflect "reflect"
	models "server/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockUserSetter is a mock of UserSetter interface.
type MockUserSetter struct {
	ctrl     *gomock.Controller
	recorder *MockUserSetterMockRecorder
}

// MockUserSetterMockRecorder is the mock recorder for MockUserSetter.
type MockUserSetterMockRecorder struct {
	mock *MockUserSetter
}

// NewMockUserSetter creates a new mock instance.
func NewMockUserSetter(ctrl *gomock.Controller) *MockUserSetter {
	mock := &MockUserSetter{ctrl: ctrl}
	mock.recorder = &MockUserSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSetter) EXPECT() *MockUserSetterMockRecorder {
	return m.recorder
}

// UserSet mocks base method.
func (m *MockUserSetter) UserSet(arg0 context.Context, arg1 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserSet indicates an expected call of UserSet.
func (mr *MockUserSetterMockRecorder) UserSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSet", reflect.TypeOf((*MockUserSetter)(nil).UserSet), arg0, arg1)
}
