// Code generated by MockGen. DO NOT EDIT.
// Source: server/internal/app (interfaces: Storager)

// Package app is a generated GoMock package.
package app

import (
	context "context"
	reflect "reflect"
	models "server/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// SecretGet mocks base method.
func (m *MockStorager) SecretGet(arg0 context.Context, arg1, arg2 string) ([]models.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretGet", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretGet indicates an expected call of SecretGet.
func (mr *MockStoragerMockRecorder) SecretGet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretGet", reflect.TypeOf((*MockStorager)(nil).SecretGet), arg0, arg1, arg2)
}

// SecretUpsert mocks base method.
func (m *MockStorager) SecretUpsert(arg0 context.Context, arg1 []models.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretUpsert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretUpsert indicates an expected call of SecretUpsert.
func (mr *MockStoragerMockRecorder) SecretUpsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretUpsert", reflect.TypeOf((*MockStorager)(nil).SecretUpsert), arg0, arg1)
}

// UserGet mocks base method.
func (m *MockStorager) UserGet(arg0 context.Context, arg1 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet.
func (mr *MockStoragerMockRecorder) UserGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockStorager)(nil).UserGet), arg0, arg1)
}

// UserSet mocks base method.
func (m *MockStorager) UserSet(arg0 context.Context, arg1 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserSet indicates an expected call of UserSet.
func (mr *MockStoragerMockRecorder) UserSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSet", reflect.TypeOf((*MockStorager)(nil).UserSet), arg0, arg1)
}
